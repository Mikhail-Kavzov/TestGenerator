using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;
using TestGeneratorLib.Interfaces;

namespace TestGeneratorLib.Implementation
{
    public sealed class NUnitCodeTestGenerator : CodeTestGenerator, ICodeTestGenerator
    {
        public NUnitCodeTestGenerator() : base("Test")
        {
        }

        public async Task<string[]> Generate(string text)
        {
            var root = (CompilationUnitSyntax) await (CSharpSyntaxTree.ParseText(text).GetRootAsync());
            return GenerateClasses(root).ToArray();
        }

        protected override UsingDirectiveSyntax GetDefaultUsing()
        {
            return UsingDirective(
                QualifiedName(IdentifierName("NUnit"),
                IdentifierName("Framework"))
                );
        }

        protected override StatementSyntax GetUnitTestBody()
        {
            return ExpressionStatement(
              InvocationExpression(
                MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression, IdentifierName("Assert"),
                                IdentifierName("Fail")),
                ArgumentList(SeparatedList(
                    new List<ArgumentSyntax>() {
                        Argument(
                            LiteralExpression(SyntaxKind.StringLiteralExpression, Literal("Autogenerated")))
                    }
             ))));
        }
    }
}
